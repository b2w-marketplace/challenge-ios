//
//  HomeViewController.swift
//  ALojinha
//
//  Created by Arlen Ricardo Pereira on 01/05/19.
//  Copyright (c) 2019 Arlen Ricardo Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ImageSlideshow
import AlamofireImage
import SDWebImage

protocol HomeDisplayLogic: class
{
  func displayBanners(viewModel: HomeModel.BannerModel.ViewModel)
  func displayCategories(viewModel: HomeModel.CategoriesModel.ViewModel)
  func displayBestSellers(viewModel: HomeModel.BestSellersModel.ViewModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic, UICollectionViewDelegate, UICollectionViewDataSource, UITableViewDataSource, UITableViewDelegate
{
    
  // MARK: - Variables
  var interactor: HomeBusinessLogic?
  var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
  var displayedBanners: [InputSource] = []
    var displayedCategories: [HomeModel.CategoriesModel.ViewModel.DisplayedCategories] = [] {
        didSet {
            collectionViewFrame.reloadData()
        }
    }
    
    var displayedBestSellers: [HomeModel.BestSellersModel.ViewModel.DisplayedBestSellers] = [] {
        didSet {
            tableViewFrame.reloadData()
        }
    }
    var categorySelect: String = ""
    
    let categoriesCellID = "categoriesCellID"
    let bestSellersCellID = "bestSellersCellID"
    let productListSegue = "ProductList"
    let bestSellerSegue = "ProductDetail"

  // MARK: - Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: - Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = HomeInteractor()
    let presenter = HomePresenter()
    let router = HomeRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: - Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
        let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupNavigationItemImage()
    fetchBanners()
    fetchCategories()
    fetchBestSellers()
  }
    
    func setupNavigationItemImage() {
        let logoContainer = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 30))
        let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 200, height: 30))
        imageView.contentMode = .scaleAspectFit
        let logo = UIImage(named: "logoNavbar_1")
        imageView.image = logo
        logoContainer.addSubview(imageView)
        self.navigationItem.titleView = logoContainer
    }
    
    func setupSlideshowBanners() {
        slideShow.slideshowInterval = 5.0
        slideShow.pageIndicatorPosition = .init(horizontal: .center, vertical: .bottom)
        slideShow.contentScaleMode = UIView.ContentMode.scaleAspectFill
        
        let pageControl = UIPageControl()
        pageControl.currentPageIndicatorTintColor = UIColor.lightGray
        pageControl.pageIndicatorTintColor = UIColor.black
        slideShow.pageIndicator = pageControl
        slideShow.activityIndicator = DefaultActivityIndicator()
        slideShow.setImageInputs(displayedBanners)
    }
  
  // MARK: - Interfaces
    @IBOutlet weak var slideShow: ImageSlideshow!
    @IBOutlet weak var tableViewFrame: UITableView!
    @IBOutlet weak var collectionViewFrame: UICollectionView!
    
  // MARK: - Functions
  func fetchBanners() {
    let request = HomeModel.BannerModel.Request()
    interactor?.requestFetchBanners(request: request)
  }
    
    func fetchCategories() {
        let request = HomeModel.CategoriesModel.Request()
        interactor?.requestCategories(request: request)
    }
    
    func fetchBestSellers() {
        let request = HomeModel.BestSellersModel.Request()
        interactor?.requestBestSellers(request: request)
    }
  
  func displayBanners(viewModel: HomeModel.BannerModel.ViewModel) {
    for image in viewModel.displayersBanner {
        let imageUrl = image.urlImagem
        if !imageUrl.isEmpty {
            displayedBanners.append(AlamofireSource(urlString: imageUrl)!)
            
        }
    }
    setupSlideshowBanners()
  }
    
    func displayCategories(viewModel: HomeModel.CategoriesModel.ViewModel) {
        displayedCategories = viewModel.displayersCategory
    }
    
    func displayBestSellers(viewModel: HomeModel.BestSellersModel.ViewModel) {
        displayedBestSellers = viewModel.displayersBestSellers
    }
    
    // MARK: - Collection view Data Source (Categories)
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedCategories.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionViewFrame.dequeueReusableCell(withReuseIdentifier: categoriesCellID, for: indexPath) as! HomeCollectionViewCell
        let displayedCategoriesCell = self.displayedCategories[indexPath.item]
        cell.categoryCell = displayedCategoriesCell
        return cell
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let productSelected = self.displayedCategories[indexPath.row]
        performSegue(withIdentifier: productListSegue, sender: productSelected)
    }
    
    // MARK: - Table view Data Source (Product Best Sellers)
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedBestSellers.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableViewFrame.dequeueReusableCell(withIdentifier: bestSellersCellID, for: indexPath) as! HomeTableViewCell
        let displayedBestSellersCell = self.displayedBestSellers[indexPath.row]
        cell.bestSellersCell = displayedBestSellersCell
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let productSelected = self.displayedBestSellers[indexPath.row]
        performSegue(withIdentifier: bestSellerSegue, sender: productSelected)
    }
}

class HomeCollectionViewCell: UICollectionViewCell {
    
    // MARK: - Interface Cell
    
    @IBOutlet weak var imageViewCell: UIImageView!
    @IBOutlet weak var lableCell: UILabel!
    
    // MARK: - Life Cycle Cell
    override func awakeFromNib() {
        super.awakeFromNib()
    }
    
    // MARK: - Variables Cell
    var categoryCell: HomeModel.CategoriesModel.ViewModel.DisplayedCategories? {
        didSet {
            if let image = categoryCell?.urlImagem {
                imageViewCell.sd_setImage(with: URL(string: image), placeholderImage: UIImage(imageLiteralResourceName: "logoSobre_1.png"), options: [.continueInBackground])
            }
            
            if let title = categoryCell?.description {
                lableCell.text = title
            }
        }
    }
}

class HomeTableViewCell: UITableViewCell {
    
    // MARK: - Interface Cell
    @IBOutlet weak var imageViewCell: UIImageView!
    @IBOutlet weak var titleLabelCell: UILabel!
    @IBOutlet weak var price1LabelCell: UILabel!
    @IBOutlet weak var price2LabelCell: UILabel!
    
    // MARK: - Life Cycle Cell
    override func awakeFromNib() {
        super.awakeFromNib()
    }
    
    // MARK: - Variables Cell
    var bestSellersCell: HomeModel.BestSellersModel.ViewModel.DisplayedBestSellers? {
        didSet {
            if let image = bestSellersCell?.urlImagem {
                imageViewCell.sd_setImage(with: URL(string: image), placeholderImage: nil, options: [.continueInBackground])
            }
            
            if let title = bestSellersCell?.name {
                titleLabelCell.text = title
            }
            
            if let price1 = bestSellersCell?.price1 {
                let labelPrice1 = "De: \(String(format:"%.2f", price1))"
                price1LabelCell.attributedText = labelPrice1.strikeThrough()
                price1LabelCell.text = labelPrice1
            }
            
            if let price2 = bestSellersCell?.price2 {
                price2LabelCell.text = "Por: \(String(format:"%.2f", price2))"
            }
        }
    }
}

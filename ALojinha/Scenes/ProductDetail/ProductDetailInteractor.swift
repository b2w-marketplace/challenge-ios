//
//  ProductDetailInteractor.swift
//  ALojinha
//
//  Created by Arlen on 06/05/19.
//  Copyright (c) 2019 Arlen Ricardo Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductDetailBusinessLogic
{
  func requestProductDetail(request: ProductDetail.DetailModel.Request)
  func requestReserveProduct(request: ProductDetail.ReserveProductModel.Request)
}

protocol ProductDetailDataStore
{
  var productDetail: ProductAPIRequest! { get set }
}

class ProductDetailInteractor: ProductDetailBusinessLogic, ProductDetailDataStore
{
    var productDetail: ProductAPIRequest!
    
  var presenter: ProductDetailPresentationLogic?
  var worker: ProductDetailWorker?
  var productWorker = ProductWorker(productStore: ProductsRestAPI())
  
  // MARK: Functions
  func requestProductDetail(request: ProductDetail.DetailModel.Request)
  {
    let response = ProductDetail.DetailModel.Response(detailResponse: productDetail)
    presenter?.presentProductDetail(response: response)
  }
    
    func requestReserveProduct(request: ProductDetail.ReserveProductModel.Request) {
        productWorker.makeReserve(idProduct: request.idProduct) { (reserve) -> Void in
            let response = ProductDetail.ReserveProductModel.Response(reserveResponse: reserve)
            self.presenter?.presentReserve(response: response)
        }
    }
}

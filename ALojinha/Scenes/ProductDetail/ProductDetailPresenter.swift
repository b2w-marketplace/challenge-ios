//
//  ProductDetailPresenter.swift
//  ALojinha
//
//  Created by Arlen on 06/05/19.
//  Copyright (c) 2019 Arlen Ricardo Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductDetailPresentationLogic
{
  func presentProductDetail(response: ProductDetail.DetailModel.Response)
    func presentReserve(response: ProductDetail.ReserveProductModel.Response)
}

class ProductDetailPresenter: ProductDetailPresentationLogic
{
  weak var viewController: ProductDetailDisplayLogic?
  
  // MARK: - Functions
  func presentProductDetail(response: ProductDetail.DetailModel.Response)
  {
    var displayedProductDetail: [ProductDetail.DetailModel.ViewModel.DisplayedProductDetail] = []

    let product = response.detailResponse
    let displayedDetail = ProductDetail.DetailModel.ViewModel.DisplayedProductDetail(
        categoryDesc: product.category.descriptionCategory,
        id: product.idProduct,
        name: product.nameProduct,
        urlImagem: product.urlImagemProduct,
        descriptionBS: product.descriptionProduct,
        price1: product.price1Product,
        price2: product.price2Product)
    displayedProductDetail.append(displayedDetail)

    let viewModel = ProductDetail.DetailModel.ViewModel(displayersProductDetail: displayedProductDetail)
    viewController?.displayProductDetail(viewModel: viewModel)
  }
    
    func presentReserve(response: ProductDetail.ReserveProductModel.Response) {
        let result = response.reserveResponse[0].result
        let viewModel = ProductDetail.ReserveProductModel.ViewModel(result: result)
        viewController?.displayReserve(viewModel: viewModel)
    }
}

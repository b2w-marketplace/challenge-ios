//
//  ProductDetailViewController.swift
//  ALojinha
//
//  Created by Arlen on 06/05/19.
//  Copyright (c) 2019 Arlen Ricardo Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IHProgressHUD

protocol ProductDetailDisplayLogic: class
{
  func displayProductDetail(viewModel: ProductDetail.DetailModel.ViewModel)
  func displayReserve(viewModel: ProductDetail.ReserveProductModel.ViewModel)
}

class ProductDetailViewController: UIViewController, ProductDetailDisplayLogic
{
    
  // MARK: - Variables
  var interactor: ProductDetailBusinessLogic?
  var router: (NSObjectProtocol & ProductDetailRoutingLogic & ProductDetailDataPassing)?
    var displayedProductDetail: [ProductDetail.DetailModel.ViewModel.DisplayedProductDetail] = [] {
        didSet {
//            print("**** displayedProductDetail = \(displayedProductDetail)")
            self.productDetailInfo(info: displayedProductDetail)
        }
    }
    var productId: Int = 0

  // MARK: - Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: - Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ProductDetailInteractor()
    let presenter = ProductDetailPresenter()
    let router = ProductDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: - Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: - View lifecycle
  override func viewDidLoad()
  {
    super.viewDidLoad()
    fetchProductDetail()
  }
  
  // MARK: - Interface
  
    @IBOutlet weak var productImageView: UIImageView!
    @IBOutlet weak var productTitleLabel: UILabel!
    @IBOutlet weak var price1Label: UILabel!
    @IBOutlet weak var price2Label: UILabel!
    @IBOutlet weak var productDescriptionLabel: UILabel!
    @IBOutlet weak var reserveButtonOutlet: UIButton!
    @IBOutlet weak var categoryLabel: UILabel!
    
  // MARK: Functions
  func fetchProductDetail()
  {
    IHProgressHUD.show()
    let request = ProductDetail.DetailModel.Request()
    interactor?.requestProductDetail(request: request)
  }
    
    func makeReserve(idProduct: Int)
  {
    reserveButtonOutlet.isEnabled = false
    let request = ProductDetail.ReserveProductModel.Request(idProduct: idProduct)
    interactor?.requestReserveProduct(request: request)
  }
  
  func displayProductDetail(viewModel: ProductDetail.DetailModel.ViewModel)
  {
    displayedProductDetail = viewModel.displayersProductDetail
    IHProgressHUD.dismiss()
    IHProgressHUD.showSuccesswithStatus("Status Sucess")
  }
    
    func productDetailInfo(info: [ProductDetail.DetailModel.ViewModel.DisplayedProductDetail]) {
        for item in info {
            categoryLabel.text = item.categoryDesc
            productId = item.id
            productImageView.sd_setImage(with: URL(string: item.urlImagem), placeholderImage: UIImage(imageLiteralResourceName: "logoSobre_1.png"), options: [.continueInBackground])
            
            productTitleLabel.text = item.name
            
            let labelPrice1 = "De: \(String(format:"%.2f", item.price1))"
            price1Label.text = labelPrice1
            price1Label.attributedText = labelPrice1.strikeThrough()
            
            price2Label.text = "Por: \(String(format:"%.2f", item.price2))"
            
            productDescriptionLabel.text = item.descriptionBS
            productDescriptionLabel.attributedText = item.descriptionBS.htmlToAttributedString
        }
    }
    
    func displayReserve(viewModel: ProductDetail.ReserveProductModel.ViewModel) {
        switch viewModel.result {
        case "success":
            alertMessage(title: "Produto reservado com sucesso", message: nil)
            break
        default:
            alertMessage(title: "Erro ao fazer a reserva", message: "Tente mais tarde novamente...")
            break
        }
    }
    
    func alertMessage(title: String, message: String?) {
        let alertController = UIAlertController(title: title, message:
            message, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: "OK", style: .default))
        self.present(alertController, animated: true, completion: nil)
        reserveButtonOutlet.isEnabled = true
    }
    
    @IBAction func backButton(_ sender: Any) {
        dismiss(animated: true, completion: nil)
    }
    
    @IBAction func reserveButton(_ sender: Any) {
        makeReserve(idProduct: productId)
    }
    
}

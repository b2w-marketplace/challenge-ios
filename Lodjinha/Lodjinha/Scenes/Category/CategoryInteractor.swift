//
//  CategoryInteractor.swift
//  Lodjinha
//
//  Created by Gilson Gil on 24/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CategoryBusinessLogic {
  func fetchProducts(request: CategoryScene.FetchProducts.Request)
  func getNavigationTitle(request: CategoryScene.DisplayTitle.Request)
}

protocol CategoryDataStore {
  var category: Category? { get set }
  var products: [Product] { get set }
}

final class CategoryInteractor: CategoryDataStore {
  var presenter: CategoryPresentationLogic?
  lazy var worker: CategoryWorker? = { CategoryWorker() }()
  var isLoading = false
  var hasReachedEnd = false
  var currentPage: Int = 0
  var category: Category?
  var products: [Product] = []
}

extension CategoryInteractor: CategoryBusinessLogic {
  func getNavigationTitle(request: CategoryScene.DisplayTitle.Request) {
    guard let category = category else { return }
    let response = CategoryScene.DisplayTitle.Response(category: category)
    presenter?.presentNavigationTitle(response: response)
  }

  func fetchProducts(request: CategoryScene.FetchProducts.Request) {
    guard !hasReachedEnd else { return }
    guard !isLoading else { return }
    guard let categoryId = category?.identifier else { return }
    isLoading = true
    worker?.fetchProducts(categoryId: categoryId, page: currentPage) { [weak self] callback in
      guard let self = self else { return }
      do {
        let products = try callback()
        self.products.append(contentsOf: products)
        self.currentPage += 1
        let response = CategoryScene.FetchProducts.Response(products: products, shouldLoadMore: true)
        self.presenter?.presentProducts(response: response)
      } catch ALodjinhaError.endReached {
        self.hasReachedEnd = true
        let response = CategoryScene.FetchProducts.Response(products: self.products, shouldLoadMore: false)
        self.presenter?.presentProducts(response: response)
      } catch {
        self.presenter?.presentError(error)
      }
      self.isLoading = false
    }
  }
}

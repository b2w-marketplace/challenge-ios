//
//  CategoryPresenter.swift
//  Lodjinha
//
//  Created by Gilson Gil on 24/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CategoryPresentationLogic {
  func presentError(_ error: Error)
  func presentNavigationTitle(response: CategoryScene.DisplayTitle.Response)
  func presentProducts(response: CategoryScene.FetchProducts.Response)
}

final class CategoryPresenter: CategoryPresentationLogic {
  weak var viewController: CategoryDisplayLogic?

  func presentError(_ error: Error) {
    viewController?.displayError(error)
  }

  func presentNavigationTitle(response: CategoryScene.DisplayTitle.Response) {
    let viewModel = CategoryScene.DisplayTitle.ViewModel(title: response.category.description)
    viewController?.displayNavigationTitle(viewModel: viewModel)
  }

  func presentProducts(response: CategoryScene.FetchProducts.Response) {
    let displayedProducts: [DisplayedProduct] = response.products.compactMap {
      let fromPrice = String(format: "%@%.2f", arguments: [String.Home.priceFrom, $0.fromPrice])
      let toPrice = String(format: "%@%.2f", arguments: [String.Home.priceTo, $0.toPrice])
      return DisplayedProduct(imageUrl: $0.imageUrl,
                              name: $0.name,
                              fromPrice: fromPrice,
                              toPrice: toPrice)
    }
    let viewModel = CategoryScene.FetchProducts.ViewModel(displayedProducts: displayedProducts,
                                                          shouldLoadMore: response.shouldLoadMore)
    viewController?.displayProducts(viewModel: viewModel)
  }
}

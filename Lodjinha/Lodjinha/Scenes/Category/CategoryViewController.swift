//
//  CategoryViewController.swift
//  Lodjinha
//
//  Created by Gilson Gil on 24/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CategoryDisplayLogic: class {
  func displayError(_ error: Error)
  func displayNavigationTitle(viewModel: CategoryScene.DisplayTitle.ViewModel)
  func displayProducts(viewModel: CategoryScene.FetchProducts.ViewModel)
  func displayProduct(viewModel: CategoryScene.PresentProduct.ViewModel)
}

final class CategoryViewController: UIViewController {
  var interactor: CategoryBusinessLogic?
  var router: (NSObjectProtocol & CategoryRoutingLogic & CategoryDataPassing)?
  var categoryView: CategoryView?
  var displayedProducts: [DisplayedProduct] = []
  var shouldLoadMore = true

  // MARK: - Object lifecycle

  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: - Setup

  private func setup() {
    let viewController = self
    let interactor = CategoryInteractor()
    let presenter = CategoryPresenter()
    let router = CategoryRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: - View lifecycle

  override func loadView() {
    let categoryView = CategoryView()
    self.categoryView = categoryView
    view = categoryView
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    setupTableView()
    fetchProducts()
    getNavigationTitle()
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    resetTableView(animated)
  }

  // MARK: - TableView

  func setupTableView() {
    categoryView?.tableView.register(ProductCell.self, forCellReuseIdentifier: ProductCell.reuseIdentifier)
    categoryView?.tableView.register(LoadingCell.self, forCellReuseIdentifier: LoadingCell.reuseIdentifier)
    categoryView?.tableView.dataSource = self
    categoryView?.tableView.delegate = self
  }

  func resetTableView(_ animated: Bool) {
    guard let indexPath = categoryView?.tableView.indexPathForSelectedRow else { return }
    categoryView?.tableView.deselectRow(at: indexPath, animated: animated)
  }

  // MARK: - Fetch Products

  func fetchProducts() {
    let request = CategoryScene.FetchProducts.Request()
    interactor?.fetchProducts(request: request)
  }

  // MARK: - Navigation Title

  func getNavigationTitle() {
    let request = CategoryScene.DisplayTitle.Request()
    interactor?.getNavigationTitle(request: request)
  }
}

extension CategoryViewController: CategoryDisplayLogic {
  func displayError(_ error: Error) {
    DispatchQueue.main.async {
      let alert = UIAlertController(title: error.localizedDescription, message: nil, preferredStyle: .alert)
      let okAction = UIAlertAction(title: String.Lodjinha.close, style: .default, handler: nil)
      alert.addAction(okAction)
      self.present(alert, animated: true, completion: nil)
    }
  }

  func displayNavigationTitle(viewModel: CategoryScene.DisplayTitle.ViewModel) {
    DispatchQueue.main.async {
      self.navigationItem.title = viewModel.title
    }
  }

  func displayProducts(viewModel: CategoryScene.FetchProducts.ViewModel) {
    DispatchQueue.main.async {
      self.displayedProducts = viewModel.displayedProducts
      self.shouldLoadMore = viewModel.shouldLoadMore
      self.categoryView?.tableView.reloadData()
    }
  }

  func displayProduct(viewModel: CategoryScene.PresentProduct.ViewModel) {
    DispatchQueue.main.async {
      self.router?.routeToProductDetail(with: viewModel.product)
    }
  }
}

// MARK: - UITableView DataSource
extension CategoryViewController: UITableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return shouldLoadMore ? 2 : 1
  }

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    switch section {
    case 0:
      return displayedProducts.count
    default:
      return 1
    }
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell: UITableViewCell
    switch indexPath.section {
    case 0:
      cell = tableView.dequeueReusableCell(withIdentifier: ProductCell.reuseIdentifier, for: indexPath)
      if let productCell = cell as? ProductCellLogic {
        let displayedProduct = displayedProducts[indexPath.row]
        let viewModel = ProductCellViewModel(displayedProduct: displayedProduct)
        productCell.update(viewModel: viewModel)
      }
    case 1:
      cell = tableView.dequeueReusableCell(withIdentifier: LoadingCell.reuseIdentifier, for: indexPath)
    default:
      cell = UITableViewCell()
    }
    return cell
  }
}

// MARK: - UITableView Delegate
extension CategoryViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    let request = CategoryScene.PresentProduct.Request(index: indexPath.row)
    interactor?.didTapProduct(request: request)
  }
}

// MARK: - UIScrollView Delegate
extension CategoryViewController: UIScrollViewDelegate {
  func scrollViewDidScroll(_ scrollView: UIScrollView) {
    let endOfPage = scrollView.contentOffset.y > scrollView.contentSize.height - scrollView.bounds.height
    if endOfPage {
      fetchProducts()
    }
  }
}

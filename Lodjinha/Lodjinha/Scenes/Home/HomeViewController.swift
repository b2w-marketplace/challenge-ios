//
//  HomeViewController.swift
//  Lodjinha
//
//  Created by Gilson Gil on 22/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SafariServices
import UIKit

protocol HomeDisplayLogic: class {
  func displayError(_ error: Error)

  func displayBanners(viewModel: Home.FetchBanner.ViewModel)
  func displayBannerLink(viewModel: Home.PresentBannerLink.ViewModel)

  func displayCategories(viewModel: Home.FetchCategories.ViewModel)
  func displayCategory(viewModel: Home.PresentCategory.ViewModel)

  func displayBestsellers(viewModel: Home.FetchBestsellers.ViewModel)
  func displayBestseller(viewModel: Home.PresentBestsellers.ViewModel)
}

final class HomeViewController: UIViewController {
  var interactor: HomeBusinessLogic?
  var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
  var homeView: HomeViewLogic?
  var displayedBanners: [Home.FetchBanner.DisplayedBanner]?
  var displayedCategories: [Home.FetchCategories.DisplayedCategory]?
  var displayedBestsellers: [DisplayedProduct]?

  // MARK: - Object lifecycle

  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: - Setup

  private func setup() {
    let viewController = self
    let interactor = HomeInteractor()
    let presenter = HomePresenter()
    let router = HomeRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor

    let tabBarItem = UITabBarItem(title: String.Home.tabBar,
                                  image: UIImage.Home.tabBarIcon,
                                  selectedImage: UIImage.Home.tabBarIconSelected)
    self.tabBarItem = tabBarItem
  }

  // MARK: - View lifecycle

  override func loadView() {
    let homeView = HomeView()
    self.homeView = homeView
    view = homeView
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    setupTableView()
    fetchBanner()
    fetchCategories()
    fetchBestsellers()
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)

    setupNavigationBar()
    resetTableView(animated)
  }

  // MARK: - TableView

  func setupTableView() {
    homeView?.tableView.register(HomeBannerCell.self,
                                 forCellReuseIdentifier: HomeBannerCell.reuseIdentifier)
    homeView?.tableView.register(HomeCategoriesCell.self,
                                 forCellReuseIdentifier: HomeCategoriesCell.reuseIdentifier)
    homeView?.tableView.register(ProductCell.self,
                                 forCellReuseIdentifier: ProductCell.reuseIdentifier)
    homeView?.tableView.register(HomeHeader.self, forHeaderFooterViewReuseIdentifier: HomeHeader.reuseIdentifier)
    homeView?.tableView.dataSource = self
    homeView?.tableView.delegate = self
  }

  func resetTableView(_ animated: Bool) {
    guard let indexPath = homeView?.tableView.indexPathForSelectedRow else { return }
    homeView?.tableView.deselectRow(at: indexPath, animated: animated)
  }

  // MARK: - Navigation Bar

  func setupNavigationBar() {
    let image = UIImage.Root.logo
    let imageView = UIImageView(frame: CGRect(origin: .zero, size: image.size))
    imageView.image = image
    parent?.navigationItem.titleView = imageView

    parent?.navigationItem.title = String.Home.tabBar
  }

  // MARK: - Fetch Banner

  func fetchBanner() {
    interactor?.fetchBanner()
  }

  // MARK: - Fetch Categories

  func fetchCategories() {
    interactor?.fetchCategories()
  }

  // MARK: - Fetch Categories

  func fetchBestsellers() {
    interactor?.fetchBestsellers()
  }
}

// MARK: - HomeDisplayLogic
extension HomeViewController: HomeDisplayLogic {
  func displayError(_ error: Error) {
    DispatchQueue.main.async {
      let alert = UIAlertController(title: error.localizedDescription, message: nil, preferredStyle: .alert)
      let okAction = UIAlertAction(title: String.Lodjinha.close, style: .default, handler: nil)
      alert.addAction(okAction)
      self.present(alert, animated: true, completion: nil)
    }
  }

  func displayBanners(viewModel: Home.FetchBanner.ViewModel) {
    DispatchQueue.main.async {
      self.displayedBanners = viewModel.displayedBanners
      self.homeView?.tableView.reloadData()
    }
  }

  func displayBannerLink(viewModel: Home.PresentBannerLink.ViewModel) {
    DispatchQueue.main.async {
      guard let url = URL(string: viewModel.link) else { return }
      let safari = SFSafariViewController(url: url)
      self.present(safari, animated: true, completion: nil)
    }
  }

  func displayCategories(viewModel: Home.FetchCategories.ViewModel) {
    DispatchQueue.main.async {
      self.displayedCategories = viewModel.displayedCategories
      self.homeView?.tableView.reloadData()
    }
  }

  func displayCategory(viewModel: Home.PresentCategory.ViewModel) {
    DispatchQueue.main.async {
      self.router?.routeToCategory(with: viewModel.category)
    }
  }

  func displayBestsellers(viewModel: Home.FetchBestsellers.ViewModel) {
    DispatchQueue.main.async {
      self.displayedBestsellers = viewModel.displayedProducts
      self.homeView?.tableView.reloadData()
    }
  }

  func displayBestseller(viewModel: Home.PresentBestsellers.ViewModel) {
    DispatchQueue.main.async {
      self.router?.routeToProductDetails(with: viewModel.product)
    }
  }
}

// MARK: - UITableView DataSource
extension HomeViewController: UITableViewDataSource {
  func numberOfSections(in tableView: UITableView) -> Int {
    return 3
  }

  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    switch section {
    case 0:
      return 1
    case 1:
      return 1
    case 2:
      return displayedBestsellers?.count ?? 0
    default:
      return 0
    }
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell: UITableViewCell
    switch indexPath.section {
    case 0:
      cell = tableView.dequeueReusableCell(withIdentifier: HomeBannerCell.reuseIdentifier, for: indexPath)
      if let bannerCell = cell as? HomeBannerCellLogic {
        let viewModel = HomeBannerCellViewModel(displayedBanners: displayedBanners ?? [])
        bannerCell.update(viewModel: viewModel)
        bannerCell.delegate = self
      }
    case 1:
      cell = tableView.dequeueReusableCell(withIdentifier: HomeCategoriesCell.reuseIdentifier, for: indexPath)
      if let categoriesCell = cell as? HomeCategoriesCellLogic {
        let viewModel = HomeCategoriesCellViewModel(displayedCategories: displayedCategories ?? [])
        categoriesCell.update(viewModel: viewModel)
        categoriesCell.delegate = self
      }
    case 2:
      cell = tableView.dequeueReusableCell(withIdentifier: ProductCell.reuseIdentifier, for: indexPath)
      if let productCell = cell as? ProductCellLogic, let product = displayedBestsellers?[indexPath.row] {
        let viewModel = ProductCellViewModel(displayedProduct: product)
        productCell.update(viewModel: viewModel)
      }
    default:
      cell = UITableViewCell()
    }
    return cell
  }
}

// MARK: - UITableView Delegate
extension HomeViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
    switch indexPath.section {
    case 2:
      return 100
    default:
      return 0
    }
  }

  func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    switch indexPath.section {
    case 0:
      return 120
    case 1:
      return 140
    case 2:
      return UITableView.automaticDimension
    default:
      return 0
    }
  }

  func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
    switch section {
    case 0:
      return 0
    default:
      return 40
    }
  }

  func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
    let viewModel: HomeHeaderViewModel?
    switch section {
    case 1:
      viewModel = HomeHeaderViewModel(title: String.Home.categories)
    case 2:
      viewModel = HomeHeaderViewModel(title: String.Home.bestsellers)
    default:
      viewModel = nil
    }
    let header = tableView.dequeueReusableHeaderFooterView(withIdentifier: HomeHeader.reuseIdentifier)
    if let viewModel = viewModel, let homeHeader = header as? HomeHeaderLogic {
      homeHeader.update(viewModel: viewModel)
    }
    return header
  }

  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    guard indexPath.section == 2 else { return }
    interactor?.didTapBestseller(at: indexPath.row)
  }
}

// MARK: - HomeBannerCell Delegate
extension HomeViewController: HomeBannerCellDelegate {
  func didTap(at page: Int) {
    interactor?.didTapBanner(at: page)
  }
}

// MARK: - HomeCategoriesCell Delegate
extension HomeViewController: HomeCategoriesCellDelegate {
  func didTapCategory(at index: Int) {
    interactor?.didTapCategory(at: index)
  }
}

//
//  ProductDetailsViewController.swift
//  Lodjinha
//
//  Created by Gilson Gil on 25/02/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductDetailsDisplayLogic: class {
  func displayError(_ error: Error)
  func displayProduct(viewModel: ProductDetails.DisplayProduct.ViewModel)
  func displayNavigationTitle(viewModel: ProductDetails.DisplayTitle.ViewModel)
  func displaySuccess(viewModel: ProductDetails.ReserveProduct.ViewModel)
}

final class ProductDetailsViewController: UIViewController {
  var interactor: ProductDetailsBusinessLogic?
  var router: (NSObjectProtocol & ProductDetailsRoutingLogic & ProductDetailsDataPassing)?
  var productDetailsView: ProductDetailsViewLogic?
  var displayedProduct: DisplayedProduct?

  // MARK: - Object lifecycle

  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: - Setup

  private func setup() {
    let viewController = self
    let interactor = ProductDetailsInteractor()
    let presenter = ProductDetailsPresenter()
    let router = ProductDetailsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: - View lifecycle

  override func loadView() {
    let productDetailsView = ProductDetailsView(delegate: self)
    self.productDetailsView = productDetailsView
    view = productDetailsView
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    setupTableView()
    getProduct()
    getNavigationTitle()
  }

  // MARK: - UITableView

  func setupTableView() {
    productDetailsView?.tableView.register(ProductImageCell.self,
                                           forCellReuseIdentifier: ProductImageCell.reuseIdentifier)
    productDetailsView?.tableView.register(ProductPriceCell.self,
                                           forCellReuseIdentifier: ProductPriceCell.reuseIdentifier)
    productDetailsView?.tableView.register(ProductDescriptionCell.self,
                                           forCellReuseIdentifier: ProductDescriptionCell.reuseIdentifier)
    productDetailsView?.tableView.dataSource = self
  }

  // MARK: - Get Product

  private func getProduct() {
    let request = ProductDetails.DisplayProduct.Request()
    interactor?.getProduct(request: request)
  }

  // MARK: - Navigation Title

  func getNavigationTitle() {
    let request = ProductDetails.DisplayTitle.Request()
    interactor?.getNavigationTitle(request: request)
  }

  // MARK: - Pop View Controller

  func popViewController() {
    navigationController?.popViewController(animated: true)
  }
}

// MARK: - ProductDetailsViewLogic
extension ProductDetailsViewController: ProductDetailsDisplayLogic {
  func displayError(_ error: Error) {
    DispatchQueue.main.async {
      self.productDetailsView?.button.stopLoading()
      let alert = UIAlertController(title: error.localizedDescription, message: nil, preferredStyle: .alert)
      let okAction = UIAlertAction(title: String.Lodjinha.close, style: .default, handler: nil)
      alert.addAction(okAction)
      self.present(alert, animated: true, completion: nil)
    }
  }

  func displayProduct(viewModel: ProductDetails.DisplayProduct.ViewModel) {
    DispatchQueue.main.async {
      self.displayedProduct = viewModel.displayedProduct
      self.productDetailsView?.tableView.reloadData()
    }
  }

  func displayNavigationTitle(viewModel: ProductDetails.DisplayTitle.ViewModel) {
    DispatchQueue.main.async {
      self.navigationItem.title = viewModel.title
    }
  }

  func displaySuccess(viewModel: ProductDetails.ReserveProduct.ViewModel) {
    DispatchQueue.main.async {
      self.productDetailsView?.button.stopLoading()
      let alert = UIAlertController(title: viewModel.message, message: nil, preferredStyle: .alert)
      let okAction = UIAlertAction(title: String.Lodjinha.okay, style: .default) { [weak self] _ in
        self?.popViewController()
      }
      alert.addAction(okAction)
      self.present(alert, animated: true, completion: nil)
    }
  }
}

// MARK: - UITableView DataSource
extension ProductDetailsViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return 3
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell: UITableViewCell
    switch indexPath.row {
    case 0:
      cell = tableView.dequeueReusableCell(withIdentifier: ProductImageCell.reuseIdentifier, for: indexPath)
      if let imageCell = cell as? ProductImageCellLogic, let displayedProduct = displayedProduct {
        let viewModel = ProductImageCellViewModel(displayedProduct: displayedProduct)
        imageCell.update(viewModel: viewModel)
      }
    case 1:
      cell = tableView.dequeueReusableCell(withIdentifier: ProductPriceCell.reuseIdentifier, for: indexPath)
      if let priceCell = cell as? ProductPriceCellLogic, let displayedProduct = displayedProduct {
        let viewModel = ProductPriceCellViewModel(displayedProduct: displayedProduct)
        priceCell.update(viewModel: viewModel)
      }
    case 2:
      cell = tableView.dequeueReusableCell(withIdentifier: ProductDescriptionCell.reuseIdentifier, for: indexPath)
      if let descriptionCell = cell as? ProductDescriptionCellLogic, let displayedProduct = displayedProduct {
        let viewModel = ProductDescriptionCellViewModel(displayedProduct: displayedProduct)
        descriptionCell.update(viewModel: viewModel)
      }
    default:
      cell = UITableViewCell()
    }
    return cell
  }
}

// MARK: - ProductDetailsView Delegate
extension ProductDetailsViewController: ProductDetailsViewDelegate {
  func didTapReserve() {
    let request = ProductDetails.ReserveProduct.Request()
    interactor?.didTapReserve(request: request)
  }
}

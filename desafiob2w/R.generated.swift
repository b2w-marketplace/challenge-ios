//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `purleApp`.
    static let purleApp = Rswift.ColorResource(bundle: R.hostingBundle, name: "purleApp")
    
    /// `UIColor(named: "purleApp", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purleApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purleApp, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `fillVerticalLeft`.
    static let fillVerticalLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "fillVerticalLeft")
    /// Image `fillVerticalRight`.
    static let fillVerticalRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "fillVerticalRight")
    /// Image `fillVertical`.
    static let fillVertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "fillVertical")
    /// Image `homeIcon`.
    static let homeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeIcon")
    /// Image `logoAbout`.
    static let logoAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoAbout")
    /// Image `logoApp`.
    static let logoApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoApp")
    /// Image `tagIcon`.
    static let tagIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tagIcon")
    
    /// `UIImage(named: "fillVertical", bundle: ..., traitCollection: ...)`
    static func fillVertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fillVertical, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fillVerticalLeft", bundle: ..., traitCollection: ...)`
    static func fillVerticalLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fillVerticalLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fillVerticalRight", bundle: ..., traitCollection: ...)`
    static func fillVerticalRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fillVerticalRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeIcon", bundle: ..., traitCollection: ...)`
    static func homeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logoAbout", bundle: ..., traitCollection: ...)`
    static func logoAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoAbout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logoApp", bundle: ..., traitCollection: ...)`
    static func logoApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoApp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tagIcon", bundle: ..., traitCollection: ...)`
    static func tagIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tagIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.navigationBar` struct is generated, and contains static references to 1 localization keys.
    struct navigationBar {
      /// Value: Sobre
      static let about = Rswift.StringResource(key: "about", tableName: "NavigationBar", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Sobre
      static func about(_: Void = ()) -> String {
        return NSLocalizedString("about", tableName: "NavigationBar", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.tabBarItem` struct is generated, and contains static references to 2 localization keys.
    struct tabBarItem {
      /// Value: Home
      static let home = Rswift.StringResource(key: "home", tableName: "TabBarItem", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sobre
      static let about = Rswift.StringResource(key: "about", tableName: "TabBarItem", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Home
      static func home(_: Void = ()) -> String {
        return NSLocalizedString("home", tableName: "TabBarItem", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sobre
      static func about(_: Void = ()) -> String {
        return NSLocalizedString("about", tableName: "TabBarItem", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
